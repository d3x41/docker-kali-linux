---

# project information
project_name: kali-linux
project_url: "https://github.com/linuxserver/docker-kali-linux"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/kali-logo.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) - is an Advanced Penetration Testing Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments. KALI LINUX â„¢ is a trademark of OffSec.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Remote Desktop,Security"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/data", desc: "abc users home directory"}
param_usage_include_ports: true
param_ports:
  - {external_port: "3000", internal_port: "3000", port_desc: "Web Desktop GUI"}
  - {external_port: "3001", internal_port: "3001", port_desc: "Web Desktop GUI HTTPS"}
param_usage_include_env: true
param_env_vars:
  - {env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London"}
# optional variables
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "SUBFOLDER", env_value: "/", desc: "Specify a subfolder to use with reverse proxies, IE `/subfolder/`"}
  - {env_var: "TITLE", env_value: "Kali Linux", desc: "String which will be used as page/tab title in the web browser."}
opt_param_usage_include_vols: true
opt_param_volumes:
  - {vol_path: "/var/run/docker.sock", vol_host_path: "/var/run/docker.sock", desc: "Docker Socket on the system, if you want to use Docker in the container"}
opt_custom_params:
  - {name: "shm-size", name_compose: "shm_size", value: "1gb", desc: "We set this to 1 gig to prevent modern web browsers from crashing"}
opt_security_opt_param: true
opt_security_opt_param_vars:
  - {run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function on older hosts as syscalls are unknown to Docker."}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  The application can be accessed at:

  * https://yourhost:3001/


  ### Security

  >[!WARNING]
  >Do not put this on the Internet if you do not know what you are doing.

  By default this container has no authentication and the optional environment variables `CUSTOM_USER` and `PASSWORD` to enable basic http auth via the embedded NGINX server should only be used to locally secure the container from unwanted access on a local network. If exposing this to the Internet we recommend putting it behind a reverse proxy, such as [SWAG](https://github.com/linuxserver/docker-swag), and ensuring a secure authentication solution is in place. From the web interface a terminal can be launched and it is configured for passwordless sudo, so anyone with access to it can install and run whatever they want along with probing your local network.

  ### Nvidia GPU Support

  **Nvidia support is not compatible with Alpine based images as Alpine lacks Nvidia drivers**

  Nvidia support is available by leveraging Zink for OpenGL support. This can be enabled with the following run flags:

  | Variable | Description |
  | :----: | --- |
  | --gpus all | This can be filtered down but for most setups this will pass the one Nvidia GPU on the system |
  | --runtime nvidia | Specify the Nvidia runtime which mounts drivers and tools in from the host |

  The compose syntax is slightly different for this as you will need to set nvidia as the default runtime:

  ```
  sudo nvidia-ctk runtime configure --runtime=docker --set-as-default
  sudo service docker restart
  ```

  And to assign the GPU in compose:

  ```
  services:
    webtop:
      image: lscr.io/linuxserver/suyu:latest
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: 1
                capabilities: [compute,video,graphics,utility]
  ```

# changelog
changelogs:
  - {date: "19.06.25:", desc: "Rebase to Selkies baseimage."}
  - {date: "24.01.25:", desc: "Fix SVG icons not rendering."}
  - {date: "18.07.24:", desc: "Initial release."}
